var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { VdlError } from '../core/errors/error';
/** @docs-private */
export var VdlInputContainerUnsupportedTypeError = (function (_super) {
    __extends(VdlInputContainerUnsupportedTypeError, _super);
    function VdlInputContainerUnsupportedTypeError(type) {
        _super.call(this, "Input type \"" + type + "\" isn't supported by vdl-input-container.");
    }
    return VdlInputContainerUnsupportedTypeError;
}(VdlError));
/** @docs-private */
export var VdlInputContainerMissingVdlInputError = (function (_super) {
    __extends(VdlInputContainerMissingVdlInputError, _super);
    function VdlInputContainerMissingVdlInputError() {
        _super.call(this, 'vdl-input-container must contain an vdlInput directive. Did you forget to add vdlInput ' +
            'to the native input or textarea element?');
    }
    return VdlInputContainerMissingVdlInputError;
}(VdlError));
//# sourceMappingURL=input-container-errors.js.map