import { AfterContentInit, ElementRef, QueryList, EventEmitter, Renderer, OnChanges, SimpleChange } from '@angular/core';
import { NgControl } from '@angular/forms';
import { VdlIconRegistry } from '../icon/icon-registry';
import { VdlPopoverPredefined } from '../popover/popover-predefined';
export declare class VdlCharCount implements OnChanges {
    elementRef: ElementRef;
    renderer: Renderer;
    align: 'start' | 'end';
    currentLength: number;
    maxLength: number;
    warnLength: number;
    constructor(elementRef: ElementRef, renderer: Renderer);
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
}
export declare class VdlInputDirective {
    private _elementRef;
    private _renderer;
    _ngControl: NgControl;
    private _type;
    private _disabled;
    private _required;
    private _id;
    private _cachedUid;
    focused: boolean;
    disabled: any;
    id: string;
    required: any;
    requiredError: boolean;
    type: string;
    value: string;
    warnLength: number;
    maxLength: number;
    _requiredErrorChange: EventEmitter<string>;
    readonly empty: boolean;
    private readonly _uid;
    private _neverEmptyInputTypes;
    constructor(_elementRef: ElementRef, _renderer: Renderer, _ngControl: NgControl);
    focus(): void;
    _onFocus(): void;
    _onBlur(): void;
    _onInput(): void;
    private _validateType();
    private _isNeverEmpty();
    private _isBadInput();
    private _isTextarea();
}
/**
 * Component that represents a text input. It encapsulates the <input> HTMLElement and
 * improve on its behaviour, along with styling it according to the Veritas Design Language.
 */
export declare class VdlInputContainer implements AfterContentInit {
    constructor(vdlIconRegistry: VdlIconRegistry);
    align: 'start' | 'end';
    infoPopoverTitle: string;
    infoPopoverPlacement: string;
    label: string;
    hintText: string;
    charCount: boolean;
    iconError: boolean;
    iconSuccess: boolean;
    iconClear: boolean;
    iconPassword: boolean;
    iconPasswordSlash: boolean;
    iconSearch: boolean;
    errorText: string;
    searchClick: EventEmitter<{}>;
    _vdlInputChild: VdlInputDirective;
    _inputPopover: QueryList<VdlPopoverPredefined>;
    ngAfterContentInit(): void;
    /** Determines whether a class from the NgControl should be forwarded to the host element. */
    _shouldForward(prop: string): boolean;
    _clearText(): void;
    _showHidePassword(): void;
    _changeErrorText(): void;
    _focusInput(): void;
}
