var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Component, Input, Directive, ContentChild, ContentChildren, ElementRef, QueryList, ViewEncapsulation, Optional, Output, EventEmitter, Renderer } from '@angular/core';
import { NgControl } from '@angular/forms';
import { coerceBooleanProperty } from '../core';
import { getSupportedInputTypes } from '../core/platform/features';
import { VdlInputContainerUnsupportedTypeError, VdlInputContainerMissingVdlInputError } from './input-container-errors';
import { VdlIconRegistry } from '../icon/icon-registry';
import { VdlPopoverPredefined } from '../popover/popover-predefined';
// Invalid input type. Using one of these will throw an VdlInputContainerUnsupportedTypeError.
var VDL_INPUT_INVALID_TYPES = [
    'button',
    'checkbox',
    'color',
    'file',
    'hidden',
    'image',
    'radio',
    'range',
    'reset',
    'submit'
];
var nextUniqueId = 0;
export var VdlCharCount = (function () {
    function VdlCharCount(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.align = 'end';
    }
    VdlCharCount.prototype.ngOnChanges = function (changes) {
        var changedInputs = Object.keys(changes);
        var charCountElement = this.elementRef.nativeElement;
        if (changedInputs.indexOf('currentLength') != -1) {
            var charLeft = this.maxLength - this.currentLength;
            // TODO(alexw) internationalize https://jira.community.veritas.com/browse/STK-309
            charCountElement.innerHTML = charLeft + ' characters left';
            this.renderer.setElementClass(this.elementRef.nativeElement, 'vdl-char-count-low', (charLeft <= this.warnLength && charLeft > 0));
            this.renderer.setElementClass(this.elementRef.nativeElement, 'vdl-char-count-limit', (charLeft == 0));
        }
    };
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlCharCount.prototype, "align", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Number)
    ], VdlCharCount.prototype, "currentLength", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Number)
    ], VdlCharCount.prototype, "maxLength", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Number)
    ], VdlCharCount.prototype, "warnLength", void 0);
    VdlCharCount = __decorate([
        Directive({
            selector: 'vdl-char-count',
            host: {
                'class': 'vdl-char-count',
                '[class.vdl-right]': 'align == "end"',
            }
        }), 
        __metadata('design:paramtypes', [ElementRef, Renderer])
    ], VdlCharCount);
    return VdlCharCount;
}());
export var VdlInputDirective = (function () {
    function VdlInputDirective(_elementRef, _renderer, _ngControl) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._ngControl = _ngControl;
        this._type = 'text';
        this._disabled = false;
        this._required = false;
        this.focused = false;
        this.requiredError = false;
        this._requiredErrorChange = new EventEmitter();
        this._neverEmptyInputTypes = [
            'date',
            'datetime',
            'datetime-local',
            'month',
            'time',
            'week'
        ].filter(function (t) { return getSupportedInputTypes().has(t); });
        // Force setter to be called in case id was not specified.
        this.id = this.id;
    }
    Object.defineProperty(VdlInputDirective.prototype, "disabled", {
        get: function () {
            return this._ngControl ? this._ngControl.disabled : this._disabled;
        },
        set: function (value) {
            this._disabled = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlInputDirective.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            this._id = value || this._uid;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(VdlInputDirective.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function (value) {
            this._required = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlInputDirective.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value || 'text';
            this._validateType();
            // When using Angular inputs, developers are no longer able to set the properties on the native
            // input element. To ensure that bindings for `type` work, we need to sync the setter
            // with the native property. Textarea elements don't support the type property or attribute.
            if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {
                this._renderer.setElementProperty(this._elementRef.nativeElement, 'type', this._type);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlInputDirective.prototype, "value", {
        get: function () {
            return this._elementRef.nativeElement.value;
        },
        set: function (value) {
            this._elementRef.nativeElement.value = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlInputDirective.prototype, "empty", {
        get: function () {
            return !this._isNeverEmpty() &&
                (this.value == null || this.value === '') &&
                // Check if the input contains bad input. If so, we know that it only appears empty because
                // the value failed to parse. From the user's perspective it is not empty.
                // TODO(mmalerba): Add e2e test for bad input case.
                !this._isBadInput();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlInputDirective.prototype, "_uid", {
        get: function () {
            return this._cachedUid = this._cachedUid || "vdl-input-" + nextUniqueId++;
        },
        enumerable: true,
        configurable: true
    });
    VdlInputDirective.prototype.focus = function () {
        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');
    };
    VdlInputDirective.prototype._onFocus = function () {
        this.focused = true;
    };
    VdlInputDirective.prototype._onBlur = function () {
        if (this._elementRef.nativeElement.value === '' && this._required) {
            this.requiredError = true;
            this._requiredErrorChange.emit();
        }
        this.focused = false;
    };
    VdlInputDirective.prototype._onInput = function () {
        // This is a noop function and is used to let Angular know whenever the value changes.
        // Angular will run a new change detection each time the `input` event has been dispatched.
        // It's necessary that Angular recognizes the value change, because when floatingLabel
        // is set to false and Angular forms aren't used, the placeholder won't recognize the
        // value changes and will not disappear.
        // Listening to the input event wouldn't be necessary when the input is using the
        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
        if (this._elementRef.nativeElement.value == '' && this._required) {
            this.requiredError = true;
            this._requiredErrorChange.emit();
        }
        else {
            this.requiredError = false;
            this._requiredErrorChange.emit();
        }
    };
    VdlInputDirective.prototype._validateType = function () {
        if (VDL_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {
            throw new VdlInputContainerUnsupportedTypeError(this._type);
        }
    };
    VdlInputDirective.prototype._isNeverEmpty = function () {
        return this._neverEmptyInputTypes.indexOf(this._type) !== -1;
    };
    VdlInputDirective.prototype._isBadInput = function () {
        return this._elementRef.nativeElement.validity.badInput;
    };
    VdlInputDirective.prototype._isTextarea = function () {
        var nativeElement = this._elementRef.nativeElement;
        return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;
    };
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlInputDirective.prototype, "disabled", null);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlInputDirective.prototype, "id", null);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlInputDirective.prototype, "required", null);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlInputDirective.prototype, "requiredError", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlInputDirective.prototype, "type", null);
    __decorate([
        Input(), 
        __metadata('design:type', Number)
    ], VdlInputDirective.prototype, "warnLength", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Number)
    ], VdlInputDirective.prototype, "maxLength", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', Object)
    ], VdlInputDirective.prototype, "_requiredErrorChange", void 0);
    VdlInputDirective = __decorate([
        Directive({
            selector: "input[vdlInput], textarea[vdlInput]",
            host: {
                'class': 'vdl-input-element',
                // Native input properties that are overwritten by Angular inputs need to be synced with
                // the native input element. Otherwise property bindings for those don't work.
                '[id]': 'id',
                '[disabled]': 'disabled',
                '[required]': 'required',
                '(blur)': '_onBlur()',
                '(focus)': '_onFocus()',
                '(input)': '_onInput()',
            }
        }),
        __param(2, Optional()), 
        __metadata('design:paramtypes', [ElementRef, Renderer, NgControl])
    ], VdlInputDirective);
    return VdlInputDirective;
}());
/**
 * Component that represents a text input. It encapsulates the <input> HTMLElement and
 * improve on its behaviour, along with styling it according to the Veritas Design Language.
 */
export var VdlInputContainer = (function () {
    function VdlInputContainer(vdlIconRegistry) {
        this.align = 'start';
        this.charCount = false;
        this.iconError = false;
        this.iconSuccess = false;
        this.iconClear = false;
        this.iconPassword = false;
        this.iconPasswordSlash = false;
        this.iconSearch = false;
        this.searchClick = new EventEmitter();
        vdlIconRegistry.registerFontClassAlias('fontawesome', 'fa');
    }
    VdlInputContainer.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this._vdlInputChild) {
            throw new VdlInputContainerMissingVdlInputError();
        }
        this._vdlInputChild._requiredErrorChange.subscribe(function () { return _this._changeErrorText(); });
    };
    /** Determines whether a class from the NgControl should be forwarded to the host element. */
    VdlInputContainer.prototype._shouldForward = function (prop) {
        var control = this._vdlInputChild ? this._vdlInputChild._ngControl : null;
        return control && control[prop];
    };
    VdlInputContainer.prototype._clearText = function () {
        if (this._vdlInputChild.value.length > 0) {
            this._vdlInputChild.value = '';
        }
    };
    VdlInputContainer.prototype._showHidePassword = function () {
        if (this.iconPassword) {
            this._vdlInputChild.type = 'text';
            this.iconPassword = false;
            this.iconPasswordSlash = true;
        }
        else {
            this._vdlInputChild.type = 'password';
            this.iconPassword = true;
            this.iconPasswordSlash = false;
        }
    };
    VdlInputContainer.prototype._changeErrorText = function () {
        if (this._vdlInputChild.requiredError) {
            // TODO(alexw) internationalize https://jira.community.veritas.com/browse/STK-309
            this.errorText = 'please fill out this field';
        }
        else {
            this.errorText = '';
        }
    };
    VdlInputContainer.prototype._focusInput = function () {
        this._vdlInputChild.focus();
    };
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlInputContainer.prototype, "align", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlInputContainer.prototype, "infoPopoverTitle", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlInputContainer.prototype, "infoPopoverPlacement", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlInputContainer.prototype, "label", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlInputContainer.prototype, "hintText", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlInputContainer.prototype, "charCount", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlInputContainer.prototype, "iconError", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlInputContainer.prototype, "iconSuccess", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlInputContainer.prototype, "iconClear", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlInputContainer.prototype, "iconPassword", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlInputContainer.prototype, "iconPasswordSlash", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlInputContainer.prototype, "iconSearch", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlInputContainer.prototype, "errorText", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', Object)
    ], VdlInputContainer.prototype, "searchClick", void 0);
    __decorate([
        ContentChild(VdlInputDirective), 
        __metadata('design:type', VdlInputDirective)
    ], VdlInputContainer.prototype, "_vdlInputChild", void 0);
    __decorate([
        ContentChildren(VdlPopoverPredefined), 
        __metadata('design:type', QueryList)
    ], VdlInputContainer.prototype, "_inputPopover", void 0);
    VdlInputContainer = __decorate([
        Component({selector: 'vdl-input-container',
            template: "<div class=\"vdl-input-wrapper\"><div class=\"vdl-input-table\"><label class=\"vdl-input-label\" [attr.for]=\"_vdlInputChild.id\" [class.vdl-empty]=\"_vdlInputChild.empty\" [class.vdl-focused]=\"_vdlInputChild.focused\" [class.vdl-disabled]=\"_vdlInputChild.disabled\" [class.vdl-required-error]=\"_vdlInputChild.requiredError\">{{label}} <span class=\"vdl-label-required\" *ngIf=\"_vdlInputChild.required\">*</span></label><div class=\"vdl-input-prefix\"><ng-content select=\"[vdlPrefix]\"></ng-content></div><div class=\"vdl-input-infix\" [class.vdl-end]=\"align == 'end'\"><ng-content selector=\"input, textarea\"></ng-content></div><div class=\"vdl-input-suffix\"><ng-content select=\"[vdlSuffix]\"></ng-content></div><div class=\"vdl-input-suffix-icons\"><button *ngIf=\"iconPassword\" vdl-icon-button class=\"vdl-input-inline\" (click)=\"_showHidePassword()\"><vdl-icon class=\"vdl-password-eye\" fontSet=\"fontawesome\" fontIcon=\"fa-eye\"></vdl-icon></button> <button *ngIf=\"iconPasswordSlash\" vdl-icon-button class=\"vdl-input-inline\" (click)=\"_showHidePassword()\"><vdl-icon class=\"vdl-password-eye-slash\" fontSet=\"fontawesome\" fontIcon=\"fa-eye-slash\"></vdl-icon></button><div class=\"vdl-divider\" *ngIf=\"(iconPassword || iconPasswordSlash) && (iconClear || iconError || iconSuccess || _inputPopover.length > 0)\"></div><button *ngIf=\"iconClear\" vdl-icon-button class=\"vdl-input-inline\" (click)=\"_clearText()\" [class.vdl-hide-clear-icon]=\"_vdlInputChild.value.length == 0\"><vdl-icon class=\"vdl-clear\" fontSet=\"fontawesome\" fontIcon=\"fa-times-circle\"></vdl-icon></button><div class=\"vdl-divider\" [class.vdl-hide-clear-icon]=\"_vdlInputChild.value.length == 0\" *ngIf=\"iconClear && (iconSearch || iconError || iconSuccess || _inputPopover.length > 0)\"></div><button *ngIf=\"iconSearch\" vdl-icon-button class=\"vdl-input-inline\" (click)=\"searchClick.emit(_vdlInputChild.value)\"><vdl-icon class=\"vdl-search\" fontSet=\"fontawesome\" fontIcon=\"fa-search\"></vdl-icon></button><div class=\"vdl-divider\" *ngIf=\"iconSearch && (iconError || iconSuccess || _inputPopover.length > 0)\"></div><vdl-icon *ngIf=\"iconError\" fontSet=\"fontawesome\" fontIcon=\"fa-exclamation-circle\" class=\"vdl-input-inline vdl-error-circle\"></vdl-icon><div class=\"vdl-divider\" *ngIf=\"iconError && (iconSuccess || _inputPopover.length > 0)\"></div><vdl-icon *ngIf=\"iconSuccess\" fontSet=\"fontawesome\" fontIcon=\"fa-check\" class=\"vdl-input-inline vdl-success-check\"></vdl-icon><div class=\"vdl-divider\" *ngIf=\"iconSuccess && _inputPopover.length > 0\"></div><ng-content select=\"vdl-popover-predefined\"></ng-content></div></div><div class=\"vdl-input-underline\" [class.vdl-disabled]=\"_vdlInputChild.disabled\" [class.vdl-focused]=\"_vdlInputChild.focused\" [class.vdl-required-error]=\"_vdlInputChild.requiredError\"></div><div class=\"vdl-hint-container\"><vdl-hint *ngIf=\"hintText\" hintText=\"{{hintText}}\"></vdl-hint><vdl-hint *ngIf=\"errorText\" error hintText=\"{{errorText}}\"></vdl-hint></div><vdl-char-count *ngIf=\"charCount\" currentLength=\"{{_vdlInputChild.value.length}}\" warnLength=\"{{_vdlInputChild.warnLength}}\" maxLength=\"{{_vdlInputChild.maxLength}}\"></vdl-char-count></div>",
            styles: ["vdl-input-container{display:inline-block;position:relative;font-family:Roboto,sans-serif;font-size:16px;line-height:normal;text-align:left}[dir=rtl] vdl-input-container{text-align:right}.vdl-input-wrapper{margin:1rem 0;padding-bottom:6px}.vdl-input-table{display:inline-table;flex-flow:column;vertical-align:bottom;width:100%}.vdl-input-table>*{display:table-cell}.vdl-input-infix{position:relative;width:100%}.vdl-input-element{border:none;outline:0;padding:0;width:100%;margin-top:10px;color:#414142;background:0 0;font:inherit}.vdl-input-element::-webkit-input-placeholder{color:#a5a5a5;font-style:italic}.vdl-input-element:-moz-placeholder{color:#a5a5a5;opacity:1;font-style:italic}.vdl-input-element::-moz-placeholder{color:#a5a5a5;opacity:1;font-style:italic}.vdl-input-element:-ms-input-placeholder{color:#a5a5a5;font-style:italic}.vdl-end .vdl-input-element{text-align:right}[dir=rtl] .vdl-end .vdl-input-element{text-align:left}.vdl-input-label{color:#414142;position:absolute;left:0;top:0;display:block;padding-bottom:10px;font-size:14px;pointer-events:none;z-index:1;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow-x:hidden;transform:translateY(0);transform-origin:bottom left;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.vdl-input-label.vdl-focused{color:#3a7da9}.vdl-input-label.vdl-disabled{color:#c2c2c2}.vdl-input-label.vdl-empty{display:block;cursor:text}.vdl-input-label.vdl-empty.vdl-required-error.vdl-focused{color:#414142}[dir=rtl] .vdl-input-label{transform-origin:bottom right;left:auto;right:0}.vdl-input-element:disabled{color:#a5a5a5}.vdl-label-required{color:#b1181e}.vdl-input-underline{border-color:#414142;position:absolute;height:1px;width:100%;margin-top:10px;border-top-width:1px;border-top-style:solid}.vdl-input-underline.vdl-focused{border-color:#3a7da9;border-top-width:2px}.vdl-input-underline.vdl-required-error{border-color:#b1181e;border-top-width:1px}.vdl-input-underline.vdl-disabled{border-color:#c2c2c2}.vdl-hint-container{display:block;position:absolute;font-size:12px;line-height:12px;bottom:-.5rem;color:#b1181e}.vdl-hint-container.vdl-right{right:0}[dir=rtl] .vdl-hint-container{right:0;left:auto}[dir=rtl] .vdl-hint-container.vdl-right{right:auto;left:0}.vdl-char-count{display:block;position:absolute;font-size:12px;line-height:12px;bottom:-.5rem}.vdl-char-count.vdl-right{right:0}[dir=rtl] .vdl-char-count{right:0;left:auto}[dir=rtl] .vdl-char-count.vdl-right{right:auto;left:0}vdl-icon{height:16px;width:16px}.vdl-input-suffix-icons button[vdl-icon-button]{line-height:0}.vdl-info-circle{color:#414142}.vdl-error-circle{color:#b1181e}.vdl-success-check{color:#1bb51e}.vdl-search{cursor:pointer;color:#414142}.vdl-clear{color:#414142;cursor:pointer}.vdl-password-eye{color:#414142;cursor:pointer}.vdl-password-eye-slash{color:#414142;cursor:pointer}button:focus vdl-icon{color:#005a99}.vdl-hide-clear-icon{visibility:hidden}.vdl-input-suffix-icons{white-space:nowrap}.vdl-input-suffix-icons,.vdl-input-suffix-icons>*{display:inline}.vdl-divider{border-left:1px solid #e5e5e5;height:16px;margin-left:10px;margin-right:10px}.vdl-char-count-low{color:#f19700}.vdl-char-count-limit{color:#b1181e}"],
            viewProviders: [VdlIconRegistry],
            host: {
                // Remove align attribute to prevent it from interfering with layout.
                '[attr.align]': 'null',
                '[class.ng-untouched]': '_shouldForward("untouched")',
                '[class.ng-touched]': '_shouldForward("touched")',
                '[class.ng-pristine]': '_shouldForward("pristine")',
                '[class.ng-dirty]': '_shouldForward("dirty")',
                '[class.ng-valid]': '_shouldForward("valid")',
                '[class.ng-invalid]': '_shouldForward("invalid")',
                '[class.ng-pending]': '_shouldForward("pending")',
                '(click)': '_focusInput()',
            },
            encapsulation: ViewEncapsulation.None,
        }), 
        __metadata('design:paramtypes', [VdlIconRegistry])
    ], VdlInputContainer);
    return VdlInputContainer;
}());
//# sourceMappingURL=input-container.js.map