var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Directive, Input, Output, EventEmitter, ChangeDetectionStrategy, Injector, Renderer, ElementRef, ViewContainerRef, ComponentFactoryResolver, NgZone, ViewEncapsulation } from '@angular/core';
import { VdlPopoverConfig } from './popover-config';
export { VdlPopoverConfig } from './popover-config';
import { listenToTriggers } from './triggers';
import { positionElements } from './positioning';
import { PopupService } from './popup';
export var VdlPopoverWindow = (function () {
    function VdlPopoverWindow() {
        this.placement = 'auto';
    }
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlPopoverWindow.prototype, "placement", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlPopoverWindow.prototype, "title", void 0);
    VdlPopoverWindow = __decorate([
        Component({selector: 'vdl-popover-window',
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.None,
            host: { '[class]': '"popover in popover-" + placement', 'role': 'tooltip' },
            styles: [".popover{position:absolute;top:0;left:0;z-index:1060;display:block;max-width:276px;padding:1px;font-style:normal;font-weight:400;letter-spacing:normal;line-break:auto;line-height:.938;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;word-wrap:break-word;background-clip:padding-box;border:1px solid #e5e5e5;font-family:Roboto Light,sans-serif;font-size:.813rem;outline-offset:2px;outline:-2px;background-color:#f9f9f9;border-radius:3px;width:100%}.popover::after,.popover::before{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover::before{content:'';border-width:11px}.popover::after{content:'';border-width:10px}.popover.popover-top{margin-top:-15px;padding:15px 15px 0;box-shadow:0 2px 2px 0 rgba(0,0,0,.15)}.popover.popover-top::after,.popover.popover-top::before{left:50%;border-bottom-width:0}.popover.popover-top::before{bottom:-11px;margin-left:-11px;border-top-color:#f9f9f9}.popover.popover-top::after{bottom:-15px;margin-left:-11px;border-top-color:#f9f9f9;box-sizing:border-box;border:8px solid transparent;border-color:transparent transparent #f9f9f9 #f9f9f9;transform-origin:0 0;transform:rotate(-45deg);box-shadow:-2px 2px 2px 0 rgba(0,0,0,.15)}.popover.popover-right{margin-left:20px;padding:15px 15px 0;box-shadow:-2px 0 2px 0 rgba(0,0,0,.15)}.popover.popover-right::after,.popover.popover-right::before{top:50%;border-left-width:0}.popover.popover-right::before{left:-11px;margin-top:-11px;border-right-color:#f9f9f9}.popover.popover-right::after{margin-top:-11px;left:0;border-right-color:#f9f9f9;box-sizing:border-box;border:8px solid transparent;border-color:transparent transparent #f9f9f9 #f9f9f9;transform-origin:0 0;transform:rotate(45deg);box-shadow:-2px 2px 2px 0 rgba(0,0,0,.15)}.popover.popover-bottom{margin-top:15px;padding:15px 15px 0;box-shadow:0 -2px 2px 0 rgba(0,0,0,.15)}.popover.popover-bottom::after,.popover.popover-bottom::before{left:50%;border-top-width:0}.popover.popover-bottom::before{top:-11px;margin-left:-11px;border-bottom-color:#f9f9f9}.popover.popover-bottom::after{top:0;margin-left:11px;border-bottom-color:#f9f9f9;box-sizing:border-box;border:8px solid transparent;border-color:transparent transparent #f9f9f9 #f9f9f9;transform-origin:0 0;transform:rotate(135deg);box-shadow:-2px 2px 2px 0 rgba(0,0,0,.15)}.popover.popover-bottom .popover-title::before{position:absolute;top:0;left:50%;display:block;width:20px;margin-left:-10px;content:'';border-bottom:1px solid #f7f7f7}.popover.popover-left{margin-left:-15px;padding:15px 15px 0;box-shadow:2px 0 2px 0 rgba(0,0,0,.15)}.popover.popover-left::after,.popover.popover-left::before{top:50%;border-right-width:0}.popover.popover-left::before{right:-11px;margin-top:-11px;border-left-color:#f9f9f9}.popover.popover-left::after{right:-15px;margin-top:11px;border-left-color:#f9f9f9;box-sizing:border-box;border:8px solid transparent;border-color:transparent transparent #f9f9f9 #f9f9f9;transform-origin:0 0;transform:rotate(225deg);box-shadow:-2px 2px 2px 0 rgba(0,0,0,.15)}.popover-title{padding-bottom:9px;margin-top:0;border:solid 1px transparent;border-bottom-color:#e5e5e5;font-family:Roboto,sans-serif;font-size:.938rem;line-height:1rem;background-color:#f9f9f9;color:#414142;padding:0 0 9px;margin-bottom:9px}.popover-content{padding:0 0 15px;font-size:.813rem;line-height:1rem}.vdl-popover-button-container{padding-top:15px;padding-left:0;padding-right:0;display:flex;flex-wrap:nowrap}.vdl-popover-button-container button{flex-grow:1}.vdl-popover-button-container button:not(:first-child){margin-left:30px}"],
            template: "<h3 *ngIf=\"title\" class=\"popover-title\">{{title}}</h3><div class=\"popover-content\"><ng-content></ng-content></div>"
        }), 
        __metadata('design:paramtypes', [])
    ], VdlPopoverWindow);
    return VdlPopoverWindow;
}());
/**
 * A lightweight, extensible directive for fancy popover creation.
 */
export var VdlPopover = (function () {
    function VdlPopover(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {
        var _this = this;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        /**
         * Width of popover.
         */
        this.popoverWidth = 320;
        /**
         * Height of popover.
         */
        this.popoverHeight = 140;
        /**
         * Emits an event when the popover is shown
         */
        this.shown = new EventEmitter();
        /**
         * Emits an event when the popover is hidden
         */
        this.hidden = new EventEmitter();
        this.placement = config.placement;
        this.triggers = config.triggers;
        this.container = config.container;
        this._popupService = new PopupService(VdlPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);
        this._zoneSubscription = ngZone.onStable.subscribe(function () {
            if (_this._windowRef) {
                positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');
            }
        });
    }
    VdlPopover.prototype._handleClickOutsidePopover = function (e) {
        if (this._triggered) {
            return this._triggered = false;
        }
        if (!this._windowRef) {
            return;
        }
        /* Make sure click didn't happen inside popover */
        if (e.target !== this._windowRef.location.nativeElement &&
            !this._windowRef.location.nativeElement.contains(e.target)) {
            /**
             * Trigger event called 'outsideClick' so that the `listenToTriggers` utility function automatically handles the
             * close action when the close trigger is set to 'outsideClick'.
             */
            var ocEvent = document.createEvent('Event');
            if (ocEvent.initEvent) {
                /* IE-compatible event initialization */
                ocEvent.initEvent('outsideClick', true, true);
            }
            else {
                /**
                 * IE-compatible solution is deprecated. Use Event constructor instead if `initEvent` becomes unavailable.
                 */
                ocEvent = new Event('outsideClick');
            }
            this._elementRef.nativeElement.dispatchEvent(ocEvent);
        }
    };
    /**
     * Opens an element’s popover. This is considered a “manual” triggering of the popover.
     */
    VdlPopover.prototype.open = function (context) {
        if (!this._windowRef) {
            this._windowRef = this._popupService.open(this.vdlPopover, context);
            if (this.placement === 'auto') {
                var sourceRect = this._elementRef.nativeElement.getBoundingClientRect();
                // If space on bottom to display and no space to display on top
                // If space on bottom to display and no space to display left/right
                if (window.innerHeight >= sourceRect.top + (sourceRect.height / 2) + (this.popoverHeight / 2)
                    && (sourceRect.top + (sourceRect.height / 2) - (this.popoverHeight / 2) <= 0
                        || (window.innerWidth < sourceRect.right + this.popoverWidth
                            && sourceRect.left - this.popoverWidth < 0))) {
                    this.placement = 'bottom';
                }
                else if (sourceRect.top + (sourceRect.height / 2) - (this.popoverHeight / 2) > 0
                    && (window.innerHeight < sourceRect.top + (sourceRect.height / 2) + (this.popoverHeight / 2)
                        || (window.innerWidth < sourceRect.right + this.popoverWidth
                            && sourceRect.left - this.popoverWidth < 0))) {
                    this.placement = 'top';
                }
                else if (sourceRect.left - this.popoverWidth > 0
                    && (window.innerWidth < sourceRect.right + this.popoverWidth
                        || window.innerHeight < sourceRect.top + (sourceRect.height / 2) + (this.popoverHeight / 2)
                        || sourceRect.top + (sourceRect.height / 2) - (this.popoverHeight / 2) <= 0)) {
                    this.placement = 'left';
                }
                else {
                    this.placement = 'right';
                }
            }
            this._windowRef.instance.placement = this.placement;
            this._windowRef.instance.title = this.popoverTitle;
            if (this.container === 'body') {
                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
            }
            this._triggered = true;
            // we need to manually invoke change detection since events registered via
            // Renderer::listen() are not picked up by change detection with the OnPush strategy
            this._windowRef.changeDetectorRef.markForCheck();
            this.shown.emit();
        }
    };
    /**
     * Closes an element’s popover. This is considered a “manual” triggering of the popover.
     */
    VdlPopover.prototype.close = function () {
        if (this._windowRef) {
            this._popupService.close();
            this._windowRef = null;
            this.hidden.emit();
            this._triggered = false;
        }
    };
    /**
     * Toggles an element’s popover. This is considered a “manual” triggering of the popover.
     */
    VdlPopover.prototype.toggle = function () {
        if (this._windowRef) {
            this.close();
        }
        else {
            this.open();
        }
    };
    /**
     * Returns whether or not the popover is currently being shown
     */
    VdlPopover.prototype.isOpen = function () {
        return this._windowRef != null;
    };
    VdlPopover.prototype.ngOnInit = function () {
        this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));
    };
    VdlPopover.prototype.ngOnDestroy = function () {
        this.close();
        this._unregisterListenersFn();
        this._zoneSubscription.unsubscribe();
    };
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlPopover.prototype, "vdlPopover", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlPopover.prototype, "popoverTitle", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Number)
    ], VdlPopover.prototype, "popoverWidth", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Number)
    ], VdlPopover.prototype, "popoverHeight", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlPopover.prototype, "placement", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlPopover.prototype, "triggers", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlPopover.prototype, "container", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', Object)
    ], VdlPopover.prototype, "shown", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', Object)
    ], VdlPopover.prototype, "hidden", void 0);
    VdlPopover = __decorate([
        Directive({
            selector: '[vdlPopover]',
            exportAs: 'vdlPopover',
            host: { '(document:click)': '_handleClickOutsidePopover($event)' }
        }), 
        __metadata('design:paramtypes', [ElementRef, Renderer, Injector, ComponentFactoryResolver, ViewContainerRef, VdlPopoverConfig, NgZone])
    ], VdlPopover);
    return VdlPopover;
}());
//# sourceMappingURL=popover.js.map