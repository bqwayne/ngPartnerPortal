import { EventEmitter, ElementRef, AfterContentInit } from '@angular/core';
import 'rxjs/add/operator/share';
import 'rxjs/add/operator/map';
import { VdlDataTable } from './data-table';
/**
 * VdlDataTable row
 */
export interface ITableSelectableRow {
    selectableValue: string;
    onChange: EventEmitter<ITableSelectableRowSelectionChange>;
    isActive: boolean;
    change: (event: any) => void;
    ngAfterContentInit: () => void;
}
/**
 * Selectable change event data
 */
export interface ITableSelectableRowSelectionChange {
    name: string;
    target: ITableSelectableRow;
    isActive: boolean;
    selectableValue: string;
}
export declare abstract class AbstractVdlDataTableSelectableRow implements AfterContentInit, ITableSelectableRow {
    table: VdlDataTable;
    protected _element: ElementRef;
    selectableValue: string;
    onChange: EventEmitter<ITableSelectableRowSelectionChange>;
    isActive: boolean;
    constructor(table: VdlDataTable, _element: ElementRef);
    /**
     * Change active status
     */
    change(event: any): void;
    ngAfterContentInit(): void;
}
export declare class VdlDataTableHeaderSelectableRow extends AbstractVdlDataTableSelectableRow {
    table: VdlDataTable;
    protected _element: ElementRef;
    constructor(table: VdlDataTable, _element: ElementRef);
    _bindListener(): void;
    ngAfterContentInit(): void;
}
export declare class VdlDataTableSelectableRow extends AbstractVdlDataTableSelectableRow {
    table: VdlDataTable;
    protected _element: ElementRef;
    constructor(table: VdlDataTable, _element: ElementRef);
    /**
     * @param {any} element
     *
     * @returns {string}
     */
    _getIndex(element: any): string;
    _bindListener(): void;
    ngAfterContentInit(): void;
}
