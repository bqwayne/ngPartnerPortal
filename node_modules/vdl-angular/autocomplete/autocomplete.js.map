{"version":3,"file":"autocomplete.js","sourceRoot":"","sources":["../../../src/lib/autocomplete/autocomplete.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EACT,eAAe,EACf,UAAU,EACV,KAAK,EACL,SAAS,EACT,WAAW,EACX,SAAS,EACT,iBAAiB,EAClB,MAAM,eAAe;OACf,EAAC,SAAS,EAAC,MAAM,SAAS;AAEjC;;;GAGG;AACH,IAAI,4BAA4B,GAAG,CAAC,CAAC;AAerC;IAAA;QAEE,0EAA0E;QAC1E,cAAS,GAA0B,OAAO,CAAC;QAE3C,oFAAoF;QACpF,cAAS,GAAG,KAAK,CAAC;QASlB,2EAA2E;QAC3E,OAAE,GAAW,sBAAoB,4BAA4B,EAAI,CAAC;IA2BpE,CAAC;IAzBC;;;OAGG;IACH,uCAAa,GAAb,UAAc,SAAiB;QAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;QACjD,CAAC;IACH,CAAC;IAED,8DAA8D;IAC9D,wCAAc,GAAd;QAAA,iBAEC;QADC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,GAAG,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,MAAM,EAAtC,CAAsC,CAAC,CAAC;IACvE,CAAC;IAED,8EAA8E;IAC9E,uCAAa,GAAb;QACE,MAAM,CAAC;YACL,8BAA8B,EAAE,IAAI,CAAC,SAAS,KAAK,OAAO;YAC1D,8BAA8B,EAAE,IAAI,CAAC,SAAS,KAAK,OAAO;YAC1D,0BAA0B,EAAE,IAAI,CAAC,SAAS;YAC1C,yBAAyB,EAAE,CAAC,IAAI,CAAC,SAAS;SAC3C,CAAC;IACJ,CAAC;IAjCD;QAAC,SAAS,CAAC,WAAW,CAAC;;qDAAA;IACvB;QAAC,SAAS,CAAC,OAAO,CAAC;;kDAAA;IACnB;QAAC,eAAe,CAAC,SAAS,CAAC;;oDAAA;IAG3B;QAAC,KAAK,EAAE;;wDAAA;IAxBV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,kBAAkB;YAC5B,WAAW,EAAE,mBAAmB;YAChC,SAAS,EAAE,CAAC,kBAAkB,CAAC;YAC/B,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,iBAAiB;YAC3B,IAAI,EAAE;gBACJ,0BAA0B,EAAE,MAAM;aACnC;SACF,CAAC;;uBAAA;IA4CF,sBAAC;AAAD,CAAC,AA3CD,IA2CC","sourcesContent":["import {\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {VdlOption} from '../core';\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\nexport type AutocompletePositionY = 'above' | 'below';\n\n@Component({\n  moduleId: module.id,\n  selector: 'vdl-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'vdlAutocomplete',\n  host: {\n    '[class.vdl-autocomplete]': 'true'\n  }\n})\nexport class VdlAutocomplete {\n\n  /** Whether the autocomplete panel displays above or below its trigger. */\n  positionY: AutocompletePositionY = 'below';\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n  @ViewChild('panel') panel: ElementRef;\n  @ContentChildren(VdlOption) options: QueryList<VdlOption>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: (value: any) => string;\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `vdl-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display\n   * options below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    Promise.resolve().then(() => this.showPanel = !!this.options.length);\n  }\n\n  /** Sets a class on the panel based on its position (used to set y-offset). */\n  _getClassList() {\n    return {\n      'vdl-autocomplete-panel-below': this.positionY === 'below',\n      'vdl-autocomplete-panel-above': this.positionY === 'above',\n      'vdl-autocomplete-visible': this.showPanel,\n      'vdl-autocomplete-hidden': !this.showPanel\n    };\n  }\n\n}\n\n"]}