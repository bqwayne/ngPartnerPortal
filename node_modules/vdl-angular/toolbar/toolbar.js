var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { NgModule, Component, ChangeDetectionStrategy, Input, ViewEncapsulation, Directive, ElementRef, Renderer } from '@angular/core';
export var VdlToolbarRow = (function () {
    function VdlToolbarRow() {
    }
    VdlToolbarRow = __decorate([
        Directive({
            selector: 'vdl-toolbar-row',
            host: {
                '[class.vdl-toolbar-row]': 'true',
            },
        }), 
        __metadata('design:paramtypes', [])
    ], VdlToolbarRow);
    return VdlToolbarRow;
}());
export var VdlToolbar = (function () {
    function VdlToolbar(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    Object.defineProperty(VdlToolbar.prototype, "color", {
        /** The color of the toolbar. Can be primary, accent, or warn. */
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._updateColor(value);
        },
        enumerable: true,
        configurable: true
    });
    VdlToolbar.prototype._updateColor = function (newColor) {
        this._setElementColor(this._color, false);
        this._setElementColor(newColor, true);
        this._color = newColor;
    };
    VdlToolbar.prototype._setElementColor = function (color, isAdd) {
        if (color != null && color != '') {
            this.renderer.setElementClass(this.elementRef.nativeElement, "vdl-" + color, isAdd);
        }
    };
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlToolbar.prototype, "color", null);
    VdlToolbar = __decorate([
        Component({selector: 'vdl-toolbar',
            template: "<div class=\"vdl-toolbar-layout\"><vdl-toolbar-row><ng-content></ng-content></vdl-toolbar-row><ng-content select=\"vdl-toolbar-row\"></ng-content></div>",
            styles: [".vdl-toolbar{display:flex;box-sizing:border-box;width:100%;font-size:20px;font-weight:500;font-family:Roboto,sans-serif;padding:0 16px;flex-direction:column}.vdl-toolbar .vdl-toolbar-row{display:flex;box-sizing:border-box;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.vdl-toolbar{min-height:64px}.vdl-toolbar-row{height:64px}@media (max-width:600px) and (orientation:portrait){.vdl-toolbar{min-height:56px}.vdl-toolbar-row{height:56px}}@media (max-width:960px) and (orientation:landscape){.vdl-toolbar{min-height:48px}.vdl-toolbar-row{height:48px}}"],
            host: {
                '[class.vdl-toolbar]': 'true',
                'role': 'toolbar'
            },
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.None
        }), 
        __metadata('design:paramtypes', [ElementRef, Renderer])
    ], VdlToolbar);
    return VdlToolbar;
}());
export var VdlToolbarModule = (function () {
    function VdlToolbarModule() {
    }
    /** @deprecated */
    VdlToolbarModule.forRoot = function () {
        return {
            ngModule: VdlToolbarModule,
            providers: []
        };
    };
    VdlToolbarModule = __decorate([
        NgModule({
            exports: [VdlToolbar, VdlToolbarRow],
            declarations: [VdlToolbar, VdlToolbarRow],
        }), 
        __metadata('design:paramtypes', [])
    ], VdlToolbarModule);
    return VdlToolbarModule;
}());
//# sourceMappingURL=toolbar.js.map