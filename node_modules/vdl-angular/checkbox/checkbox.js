var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectorRef, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer, ViewEncapsulation, forwardRef, NgModule, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { coerceBooleanProperty } from '../core';
import { VdlHintModule } from '../core/shared/hint/hint';
import { VdlIconRegistry } from '../icon/icon-registry';
import { VdlIconModule } from '../icon/icon';
import { VdlPopoverModule } from '../popover/index';
var nextId = 0;
/**
 * Provider Expression that allows vdl-checkbox to register as a ControlValueAccessor.
 * This allows it to support [(ngModel)].
 * @docs-private
 */
export var VDL_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return VdlCheckbox; }),
    multi: true
};
/**
 * Represents the different states that require custom transitions between them.
 * @docs-private
 */
export var TransitionCheckState;
(function (TransitionCheckState) {
    /** The initial state of the component before any user interaction. */
    TransitionCheckState[TransitionCheckState["Init"] = 0] = "Init";
    /** The state representing the component when it's becoming checked. */
    TransitionCheckState[TransitionCheckState["Checked"] = 1] = "Checked";
    /** The state representing the component when it's becoming unchecked. */
    TransitionCheckState[TransitionCheckState["Unchecked"] = 2] = "Unchecked";
    /** The state representing the component when it's becoming indeterminate. */
    TransitionCheckState[TransitionCheckState["Indeterminate"] = 3] = "Indeterminate";
})(TransitionCheckState || (TransitionCheckState = {}));
/** Change event object emitted by VdlCheckbox. */
export var VdlCheckboxChange = (function () {
    function VdlCheckboxChange() {
    }
    return VdlCheckboxChange;
}());
/**
 * A vdl checkbox component. Supports all of the functionality of an HTML5 checkbox,
 * and exposes a similar API. A VdlCheckbox can be either checked, unchecked, indeterminate, or
 * disabled. Note that all additional accessibility attributes are taken care of by the component,
 * so there is no need to provide them yourself. However, if you want to omit a label and still
 * have the checkbox be accessible, you may supply an [aria-label] input.
 * See: https://www.google.com/design/spec/components/selection-controls.html
 */
export var VdlCheckbox = (function () {
    function VdlCheckbox(_renderer, _elementRef, _changeDetectorRef, vdlIconRegistry) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this.ariaLabel = '';
        this.ariaLabelledby = null;
        this.id = "vdl-checkbox-" + ++nextId;
        this.tabindex = 0;
        this.name = null;
        this.labelPosition = 'after';
        this._disabled = false;
        this.change = new EventEmitter();
        this.indeterminateChange = new EventEmitter();
        this.onTouched = function () { };
        this._currentAnimationClass = '';
        this._currentCheckState = TransitionCheckState.Init;
        this._checked = false;
        this._indeterminate = false;
        this._controlValueAccessorChangeFn = function (value) { };
        this._hasFocus = false;
        vdlIconRegistry.registerFontClassAlias('fontawesome', 'fa');
    }
    Object.defineProperty(VdlCheckbox.prototype, "inputId", {
        /** ID of the native input element inside `<vdl-checkbox>` */
        get: function () {
            return "input-" + this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlCheckbox.prototype, "required", {
        /** Whether the checkbox is required. */
        get: function () { return this._required; },
        set: function (value) { this._required = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlCheckbox.prototype, "disabled", {
        get: function () { return this._disabled; },
        set: function (value) { this._disabled = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlCheckbox.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (checked) {
            if (checked != this.checked) {
                if (this._indeterminate) {
                    this._indeterminate = false;
                    this.indeterminateChange.emit(this._indeterminate);
                }
                this._checked = checked;
                this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
                this._changeDetectorRef.markForCheck();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlCheckbox.prototype, "indeterminate", {
        /**
         * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
         * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to
         * false. This differs from the web platform in that indeterminate state on native
         * checkboxes is only removed when the user manually checks the checkbox (rather than setting the
         * `checked` property programmatically). However, we feel that this behavior is more accommodating
         * to the way consumers would envision using this component.
         */
        get: function () {
            return this._indeterminate;
        },
        set: function (indeterminate) {
            var changed = indeterminate != this._indeterminate;
            this._indeterminate = indeterminate;
            if (this._indeterminate) {
                this._transitionCheckState(TransitionCheckState.Indeterminate);
            }
            else {
                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);
            }
            if (changed) {
                this.indeterminateChange.emit(this._indeterminate);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the model value. Implemented as part of ControlValueAccessor.
     * @param value Value to be set to the model.
     */
    VdlCheckbox.prototype.writeValue = function (value) {
        this.checked = !!value;
    };
    VdlCheckbox.prototype.registerOnChange = function (fn) {
        this._controlValueAccessorChangeFn = fn;
    };
    VdlCheckbox.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    VdlCheckbox.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    VdlCheckbox.prototype._transitionCheckState = function (newState) {
        var oldState = this._currentCheckState;
        var renderer = this._renderer;
        var elementRef = this._elementRef;
        if (oldState === newState) {
            return;
        }
        if (this._currentAnimationClass.length > 0) {
            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);
        }
        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);
        this._currentCheckState = newState;
        if (this._currentAnimationClass.length > 0) {
            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);
        }
    };
    VdlCheckbox.prototype._emitChangeEvent = function () {
        var event = new VdlCheckboxChange();
        event.source = this;
        event.checked = this.checked;
        this._controlValueAccessorChangeFn(this.checked);
        this.change.emit(event);
    };
    VdlCheckbox.prototype._onInputFocus = function () {
        this._hasFocus = true;
    };
    VdlCheckbox.prototype._onInputBlur = function () {
        this._hasFocus = false;
        this.onTouched();
    };
    VdlCheckbox.prototype.toggle = function () {
        this.checked = !this.checked;
    };
    VdlCheckbox.prototype._onInteractionEvent = function (event) {
        event.stopPropagation();
        if (!this.disabled) {
            this.toggle();
            this._emitChangeEvent();
        }
    };
    VdlCheckbox.prototype.focus = function () {
        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
        this._onInputFocus();
    };
    VdlCheckbox.prototype._onInputClick = function (event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `checkbox` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
    };
    VdlCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {
        var animSuffix;
        switch (oldState) {
            case TransitionCheckState.Init:
                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or
                // [checked] bound to it.
                if (newState === TransitionCheckState.Checked) {
                    animSuffix = 'unchecked-checked';
                }
                else {
                    return '';
                }
                break;
            case TransitionCheckState.Unchecked:
                animSuffix = newState === TransitionCheckState.Checked ?
                    'unchecked-checked' : 'unchecked-indeterminate';
                break;
            case TransitionCheckState.Checked:
                animSuffix = newState === TransitionCheckState.Unchecked ?
                    'checked-unchecked' : 'checked-indeterminate';
                break;
            case TransitionCheckState.Indeterminate:
                animSuffix = newState === TransitionCheckState.Checked ?
                    'indeterminate-checked' : 'indeterminate-unchecked';
        }
        return "vdl-checkbox-anim-" + animSuffix;
    };
    __decorate([
        Input('aria-label'), 
        __metadata('design:type', String)
    ], VdlCheckbox.prototype, "ariaLabel", void 0);
    __decorate([
        Input('aria-labelledby'), 
        __metadata('design:type', String)
    ], VdlCheckbox.prototype, "ariaLabelledby", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlCheckbox.prototype, "id", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlCheckbox.prototype, "label", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Number)
    ], VdlCheckbox.prototype, "tabindex", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlCheckbox.prototype, "name", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlCheckbox.prototype, "hintText", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], VdlCheckbox.prototype, "errorText", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlCheckbox.prototype, "labelPosition", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlCheckbox.prototype, "required", null);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], VdlCheckbox.prototype, "disabled", null);
    __decorate([
        Output(), 
        __metadata('design:type', EventEmitter)
    ], VdlCheckbox.prototype, "change", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', EventEmitter)
    ], VdlCheckbox.prototype, "indeterminateChange", void 0);
    __decorate([
        ViewChild('input'), 
        __metadata('design:type', ElementRef)
    ], VdlCheckbox.prototype, "_inputElement", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlCheckbox.prototype, "checked", null);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlCheckbox.prototype, "indeterminate", null);
    VdlCheckbox = __decorate([
        Component({selector: 'vdl-checkbox',
            template: "<label class=\"vdl-checkbox-layout\"><div class=\"vdl-checkbox-inner-container\"><input #input class=\"vdl-checkbox-input cdk-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" [tabIndex]=\"tabindex\" [indeterminate]=\"indeterminate\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (focus)=\"_onInputFocus()\" (blur)=\"_onInputBlur()\" (change)=\"_onInteractionEvent($event)\" (click)=\"_onInputClick($event)\"><div class=\"vdl-checkbox-frame\"></div><div class=\"vdl-checkbox-background\"><svg version=\"1.1\" class=\"vdl-checkbox-checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" xml:space=\"preserve\"><path class=\"vdl-checkbox-checkmark-path\" fill=\"none\" stroke=\"white\" d=\"M4.1,12.7 9,17.6 20.3,6.3\"/></svg><div class=\"vdl-checkbox-mixedmark\"></div></div></div><span class=\"vdl-checkbox-label-container\"><span class=\"vdl-checkbox-label\" *ngIf=\"label\">{{label}}</span> <span class=\"vdl-placeholder-required\" *ngIf=\"required\" class=\"vdl-checkbox-required\">*</span><ng-content select=\"vdl-popover-predefined\"></ng-content><div class=\"vdl-hint-container\" *ngIf=\"hintText || errorText\"><vdl-hint *ngIf=\"hintText\" hintText=\"{{hintText}}\"></vdl-hint><vdl-hint *ngIf=\"errorText\" error hintText=\"{{errorText}}\"></vdl-hint></div></span></label>",
            styles: ["@keyframes vdl-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes vdl-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes vdl-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes vdl-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes vdl-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes vdl-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes vdl-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes vdl-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes vdl-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes vdl-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.vdl-checkbox-background,.vdl-checkbox-checkmark,.vdl-checkbox-frame{bottom:0;left:0;position:absolute;right:0;top:0}.vdl-checkbox-checkmark,.vdl-checkbox-mixedmark{width:calc(100% - 4px)}.vdl-checkbox-background,.vdl-checkbox-frame{border-radius:3px;box-sizing:border-box;pointer-events:none}vdl-checkbox{cursor:pointer;padding:0;padding-bottom:13px;display:inline-block}.vdl-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex}.vdl-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:2px 8px auto auto;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .vdl-checkbox-inner-container{margin-left:8px;margin-right:auto}.vdl-checkbox-layout .vdl-checkbox-label-container{line-height:24px}.vdl-checkbox-frame{background-color:transparent;border:2px solid;transition:border-color 90ms cubic-bezier(0,0,.2,.1)}.vdl-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}.vdl-checkbox-checkmark{width:100%}.vdl-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.66667px}.vdl-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}.vdl-checkbox-label-before .vdl-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .vdl-checkbox-label-before .vdl-checkbox-inner-container{margin-left:auto;margin-right:8px}.vdl-checkbox-label-before .vdl-checkbox-label-container{text-align:right}.vdl-checkbox-anim-unchecked-indeterminate .vdl-checkbox-background{background-color:#005a99}.vdl-checkbox-checked .vdl-checkbox-background{background-color:#005a99}.vdl-checkbox-checked .vdl-checkbox-checkmark{opacity:1}.vdl-checkbox-checked .vdl-checkbox-checkmark-path{stroke-dashoffset:0}.vdl-checkbox-checked .vdl-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.vdl-checkbox-indeterminate .vdl-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.vdl-checkbox-indeterminate .vdl-checkbox-checkmark-path{stroke-dashoffset:0}.vdl-checkbox-indeterminate .vdl-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.vdl-checkbox-unchecked .vdl-checkbox-background{background-color:transparent}.vdl-checkbox-disabled{cursor:default}.vdl-checkbox-anim-unchecked-checked .vdl-checkbox-background{animation:180ms linear 0s vdl-checkbox-fade-in-background}.vdl-checkbox-anim-unchecked-checked .vdl-checkbox-checkmark-path{animation:180ms linear 0s vdl-checkbox-unchecked-checked-checkmark-path}.vdl-checkbox-anim-unchecked-indeterminate .vdl-checkbox-background{animation:180ms linear 0s vdl-checkbox-fade-in-background}.vdl-checkbox-anim-unchecked-indeterminate .vdl-checkbox-mixedmark{animation:90ms linear 0s vdl-checkbox-unchecked-indeterminate-mixedmark}.vdl-checkbox-anim-checked-unchecked .vdl-checkbox-background{animation:180ms linear 0s vdl-checkbox-fade-out-background}.vdl-checkbox-anim-checked-unchecked .vdl-checkbox-checkmark-path{animation:90ms linear 0s vdl-checkbox-checked-unchecked-checkmark-path}.vdl-checkbox-anim-checked-indeterminate .vdl-checkbox-checkmark{animation:90ms linear 0s vdl-checkbox-checked-indeterminate-checkmark}.vdl-checkbox-anim-checked-indeterminate .vdl-checkbox-mixedmark{animation:90ms linear 0s vdl-checkbox-checked-indeterminate-mixedmark}.vdl-checkbox-anim-indeterminate-checked .vdl-checkbox-checkmark{animation:.5s linear 0s vdl-checkbox-indeterminate-checked-checkmark}.vdl-checkbox-anim-indeterminate-checked .vdl-checkbox-mixedmark{animation:.5s linear 0s vdl-checkbox-indeterminate-checked-mixedmark}.vdl-checkbox-anim-indeterminate-unchecked .vdl-checkbox-background{animation:180ms linear 0s vdl-checkbox-fade-out-background}.vdl-checkbox-anim-indeterminate-unchecked .vdl-checkbox-mixedmark{animation:.3s linear 0s vdl-checkbox-indeterminate-unchecked-mixedmark}.vdl-checkbox-input{bottom:0;left:50%}.vdl-checkbox-frame{border-color:#414142}.vdl-checkbox-checkmark{fill:#fff}.vdl-checkbox-checkmark-path{stroke:#fff!important}.vdl-checkbox-mixedmark{background-color:#fff}[required] .vdl-checkbox-required{color:#b1181e}.vdl-hint-container{line-height:.75rem;font-size:.75rem}.vdl-checkbox-error .vdl-checkbox-frame{border-color:#b1181e}.vdl-checkbox-focused .vdl-checkbox-frame{border-width:3px;margin:-1px}.vdl-checkbox-disabled.vdl-checkbox-checked .vdl-checkbox-background,.vdl-checkbox-disabled.vdl-checkbox-indeterminate .vdl-checkbox-background{background-color:#a5a5a5}.vdl-checkbox-disabled:not(.vdl-checkbox-checked) .vdl-checkbox-frame{border-color:#a5a5a5}.vdl-checkbox-disabled .vdl-checkbox-label-container,.vdl-checkbox-disabled .vdl-checkbox-required,.vdl-checkbox-disabled .vdl-hint-container .vdl-hint{color:#a5a5a5}"],
            host: {
                '[class.vdl-checkbox-indeterminate]': 'indeterminate',
                '[class.vdl-checkbox-checked]': 'checked',
                '[class.vdl-checkbox-disabled]': 'disabled',
                '[class.vdl-checkbox-label-before]': 'labelPosition == "before"',
                '[class.vdl-checkbox-focused]': '_hasFocus',
                '[class.vdl-checkbox-error]': 'errorText && errorText.length > 0',
            },
            providers: [VDL_CHECKBOX_CONTROL_VALUE_ACCESSOR],
            encapsulation: ViewEncapsulation.None,
            changeDetection: ChangeDetectionStrategy.OnPush
        }), 
        __metadata('design:paramtypes', [Renderer, ElementRef, ChangeDetectorRef, VdlIconRegistry])
    ], VdlCheckbox);
    return VdlCheckbox;
}());
export var VdlCheckboxModule = (function () {
    function VdlCheckboxModule() {
    }
    /** @deprecated */
    VdlCheckboxModule.forRoot = function () {
        return {
            ngModule: VdlCheckboxModule,
            providers: []
        };
    };
    VdlCheckboxModule = __decorate([
        NgModule({
            imports: [
                CommonModule,
                VdlHintModule,
                VdlIconModule,
                VdlPopoverModule
            ],
            exports: [VdlCheckbox],
            declarations: [VdlCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], VdlCheckboxModule);
    return VdlCheckboxModule;
}());
//# sourceMappingURL=checkbox.js.map