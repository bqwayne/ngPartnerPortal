import { ChangeDetectorRef, ElementRef, EventEmitter, Renderer, ModuleWithProviders } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { VdlIconRegistry } from '../icon/icon-registry';
/**
 * Provider Expression that allows vdl-checkbox to register as a ControlValueAccessor.
 * This allows it to support [(ngModel)].
 * @docs-private
 */
export declare const VDL_CHECKBOX_CONTROL_VALUE_ACCESSOR: any;
/**
 * Represents the different states that require custom transitions between them.
 * @docs-private
 */
export declare enum TransitionCheckState {
    /** The initial state of the component before any user interaction. */
    Init = 0,
    /** The state representing the component when it's becoming checked. */
    Checked = 1,
    /** The state representing the component when it's becoming unchecked. */
    Unchecked = 2,
    /** The state representing the component when it's becoming indeterminate. */
    Indeterminate = 3,
}
/** Change event object emitted by VdlCheckbox. */
export declare class VdlCheckboxChange {
    source: VdlCheckbox;
    checked: boolean;
}
/**
 * A vdl checkbox component. Supports all of the functionality of an HTML5 checkbox,
 * and exposes a similar API. A VdlCheckbox can be either checked, unchecked, indeterminate, or
 * disabled. Note that all additional accessibility attributes are taken care of by the component,
 * so there is no need to provide them yourself. However, if you want to omit a label and still
 * have the checkbox be accessible, you may supply an [aria-label] input.
 * See: https://www.google.com/design/spec/components/selection-controls.html
 */
export declare class VdlCheckbox implements ControlValueAccessor {
    private _renderer;
    private _elementRef;
    private _changeDetectorRef;
    ariaLabel: string;
    ariaLabelledby: string;
    id: string;
    label: string;
    tabindex: number;
    name: string;
    hintText: string;
    errorText: string;
    labelPosition: 'before' | 'after';
    /** ID of the native input element inside `<vdl-checkbox>` */
    readonly inputId: string;
    private _required;
    /** Whether the checkbox is required. */
    required: boolean;
    private _disabled;
    disabled: boolean;
    change: EventEmitter<VdlCheckboxChange>;
    indeterminateChange: EventEmitter<boolean>;
    _inputElement: ElementRef;
    onTouched: () => any;
    private _currentAnimationClass;
    private _currentCheckState;
    private _checked;
    private _indeterminate;
    private _controlValueAccessorChangeFn;
    _hasFocus: boolean;
    constructor(_renderer: Renderer, _elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, vdlIconRegistry: VdlIconRegistry);
    checked: boolean;
    /**
     * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
     * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to
     * false. This differs from the web platform in that indeterminate state on native
     * checkboxes is only removed when the user manually checks the checkbox (rather than setting the
     * `checked` property programmatically). However, we feel that this behavior is more accommodating
     * to the way consumers would envision using this component.
     */
    indeterminate: boolean;
    /**
     * Sets the model value. Implemented as part of ControlValueAccessor.
     * @param value Value to be set to the model.
     */
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    private _transitionCheckState(newState);
    private _emitChangeEvent();
    _onInputFocus(): void;
    _onInputBlur(): void;
    toggle(): void;
    _onInteractionEvent(event: Event): void;
    focus(): void;
    _onInputClick(event: Event): void;
    private _getAnimationClassForCheckStateTransition(oldState, newState);
}
export declare class VdlCheckboxModule {
    /** @deprecated */
    static forRoot(): ModuleWithProviders;
}
