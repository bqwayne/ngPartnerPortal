{"version":3,"file":"snack-bar.js","sourceRoot":"","sources":["../../../src/lib/snack-bar/snack-bar.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EAAC,UAAU,EAAgB,QAAQ,EAAE,QAAQ,EAAC,MAAM,eAAe;OACnE,EAEL,eAAe,EACf,OAAO,EAEP,YAAY,EACZ,aAAa,EACd,MAAM,SAAS;OACT,EAAC,iBAAiB,EAAC,MAAM,oBAAoB;OAC7C,EAAC,cAAc,EAAC,MAAM,iBAAiB;OACvC,EAAC,oBAAoB,EAAC,MAAM,uBAAuB;OACnD,EAAC,cAAc,EAAC,MAAM,oBAAoB;OAC1C,EAAC,YAAY,EAAC,MAAM,4BAA4B;AAGvD;;GAEG;AAEH;IAsBE,qBACY,QAAiB,EACjB,KAAoB,EACI,eAA4B;QAFpD,aAAQ,GAAR,QAAQ,CAAS;QACjB,UAAK,GAAL,KAAK,CAAe;QACI,oBAAe,GAAf,eAAe,CAAa;IAAG,CAAC;IAhBpE,sBAAI,2CAAkB;QADtB,iEAAiE;aACjE;YACE,MAAM,CAAC,IAAI,CAAC,eAAe;gBACvB,IAAI,CAAC,eAAe,CAAC,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAC7E,CAAC;aAED,UAAuB,KAA0B;YAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,eAAe,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAClD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;YACvC,CAAC;QACH,CAAC;;;OARA;IAeD;;;;;;OAMG;IACH,uCAAiB,GAAjB,UAAqB,SAA2B,EAAE,MAA0B;QAA5E,iBAoCC;QAnCC,MAAM,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC;QACtC,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACvC,IAAI,iBAAiB,GAAG,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC1E,IAAI,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,iBAAiB,EAAE,UAAU,CAAC,CAAC;QAExF,6DAA6D;QAC7D,WAAW,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC;YACrC,iFAAiF;YACjF,EAAE,CAAC,CAAC,KAAI,CAAC,kBAAkB,IAAI,WAAW,CAAC,CAAC,CAAC;gBAC3C,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YACjC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,uFAAuF;QACvF,yBAAyB;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC;gBACjD,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;YACxC,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;QAEpC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,CAAC;QACxC,CAAC;QAED,0FAA0F;QAC1F,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YACxB,WAAW,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC;gBAClC,UAAU,CAAC,cAAM,OAAA,WAAW,CAAC,OAAO,EAAE,EAArB,CAAqB,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,mBAAmB,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;QACnE,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC;QACtC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAED;;;;;OAKG;IACH,0BAAI,GAAJ,UAAK,OAAe,EAAE,MAAW,EAAE,MAA8B;QAA3C,sBAAW,GAAX,WAAW;QAAE,sBAA8B,GAA9B,WAA8B;QAC/D,MAAM,CAAC,mBAAmB,GAAG,OAAO,CAAC;QACrC,IAAI,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QACvE,iBAAiB,CAAC,QAAQ,CAAC,WAAW,GAAG,iBAAiB,CAAC;QAC3D,iBAAiB,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAC7C,iBAAiB,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;QAC3C,MAAM,CAAC,iBAAiB,CAAC;IAC3B,CAAC;IAED;;OAEG;IACK,8CAAwB,GAAhC,UAAiC,UAAsB,EACtB,MAAyB;QACxD,IAAI,eAAe,GAAG,IAAI,eAAe,CAAC,oBAAoB,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACzF,IAAI,YAAY,GAAuC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC1F,YAAY,CAAC,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC;QAE9C,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAED;;OAEG;IACK,4CAAsB,GAA9B,UAAkC,SAA2B,EAC3B,SAA+B,EAC/B,UAAsB;QACtD,IAAI,MAAM,GAAG,IAAI,eAAe,CAAC,SAAS,CAAC,CAAC;QAC5C,IAAI,UAAU,GAAG,SAAS,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QACzD,MAAM,CAAC,IAAI,cAAc,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACK,oCAAc,GAAtB;QACE,IAAI,KAAK,GAAG,IAAI,YAAY,EAAE,CAAC;QAC/B,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE;aACrD,kBAAkB,EAAE;aACpB,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAxHH;QAAC,UAAU,EAAE;mBA0BN,QAAQ,EAAE;mBAAE,QAAQ,EAAE;;mBA1BhB;IAyHb,kBAAC;AAAD,CAAC,AAxHD,IAwHC;AAED;;;;GAIG;AACH,8BAA8B,MAAyB;IACrD,MAAM,CAAC,YAAY,CAAC,IAAI,iBAAiB,EAAE,EAAE,MAAM,CAAC,CAAC;AACvD,CAAC","sourcesContent":["import {Injectable, ComponentRef, Optional, SkipSelf} from '@angular/core';\nimport {\n  ComponentType,\n  ComponentPortal,\n  Overlay,\n  OverlayRef,\n  OverlayState,\n  LiveAnnouncer,\n} from '../core';\nimport {VdlSnackBarConfig} from './snack-bar-config';\nimport {VdlSnackBarRef} from './snack-bar-ref';\nimport {VdlSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {extendObject} from '../core/util/object-extend';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class VdlSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: VdlSnackBarRef<any>;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): VdlSnackBarRef<any> {\n    return this._parentSnackBar ?\n        this._parentSnackBar._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: VdlSnackBarRef<any>) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      @Optional() @SkipSelf() private _parentSnackBar: VdlSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: VdlSnackBarConfig): VdlSnackBarRef<T> {\n    config = _applyConfigDefaults(config);\n    let overlayRef = this._createOverlay();\n    let snackBarContainer = this._attachSnackBarContainer(overlayRef, config);\n    let snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    // If a snack bar is already in view, dismiss it and enter the new snack bar after exit\n    // animation is complete.\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    // If no snack bar is in view, enter the new snack bar.\n    } else {\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => {\n        setTimeout(() => snackBarRef.dismiss(), config.duration);\n      });\n    }\n\n    this._live.announce(config.announcementMessage, config.politeness);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action = '', config: VdlSnackBarConfig = {}): VdlSnackBarRef<SimpleSnackBar> {\n    config.announcementMessage = message;\n    let simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);\n    simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;\n    simpleSnackBarRef.instance.message = message;\n    simpleSnackBarRef.instance.action = action;\n    return simpleSnackBarRef;\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: VdlSnackBarConfig): VdlSnackBarContainer {\n    let containerPortal = new ComponentPortal(VdlSnackBarContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<VdlSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attachSnackbarContent<T>(component: ComponentType<T>,\n                                    container: VdlSnackBarContainer,\n                                    overlayRef: OverlayRef): VdlSnackBarRef<T> {\n    let portal = new ComponentPortal(component);\n    let contentRef = container.attachComponentPortal(portal);\n    return new VdlSnackBarRef(contentRef.instance, container, overlayRef);\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   */\n  private _createOverlay(): OverlayRef {\n    let state = new OverlayState();\n    state.positionStrategy = this._overlay.position().global()\n        .centerHorizontally()\n        .bottom('0');\n    return this._overlay.create(state);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config: VdlSnackBarConfig): VdlSnackBarConfig {\n  return extendObject(new VdlSnackBarConfig(), config);\n}\n"]}