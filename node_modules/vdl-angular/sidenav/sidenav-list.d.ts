import { ModuleWithProviders, ElementRef, EventEmitter, Renderer } from '@angular/core';
import { VdlIconRegistry } from '../icon/index';
import { VdlButton } from '../button/button';
export interface Category {
    id?: number;
    displayName: string;
    icon: string;
    route?: string;
    expanded?: boolean;
    subCategories?: Array<Category>;
}
export declare class VdlSidenavListItem {
    private _elementRef;
    private _renderer;
    category: Category;
    expand: EventEmitter<{}>;
    /** Whether the sidenav-list-item has focus from the keyboard (not the mouse). Used for class binding. */
    _isKeyboardFocused: boolean;
    /** Whether a mousedown has occurred on this element in the last 100ms. */
    _isMouseDown: boolean;
    constructor(_elementRef: ElementRef, _renderer: Renderer, vdlIconRegistry: VdlIconRegistry);
    isExpandable(category: Category): boolean;
    isExpanded(category: Category): boolean;
    _setMousedown(): void;
    /** Focuses the sidenav-list-itme. */
    focus(): void;
    _handleKeydown(event: KeyboardEvent): void;
    _setKeyboardFocus(): void;
    _removeKeyboardFocus(): void;
    _getHostElement(): any;
}
export declare class VdlSidenavList {
    selectedCategory: Category;
    categoryList: Array<Category>;
    onCategorySelect: EventEmitter<{}>;
    _opened: boolean;
    _pinned: boolean;
    openCloseButton: VdlButton;
    constructor(vdlIconRegistry: VdlIconRegistry);
    toggleOpened(): void;
    togglePinned(): void;
    itemClicked(category: Category): void;
    isExpanded(category: Category): boolean;
    isExpandable(category: Category): boolean;
    isSelected(category: Category): boolean;
}
export declare class VdlSidenavListModule {
    /** @deprecated */
    static forRoot(): ModuleWithProviders;
}
