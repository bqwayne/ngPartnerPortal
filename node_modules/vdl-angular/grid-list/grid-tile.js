var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ViewEncapsulation, Renderer, ElementRef, Input, ContentChildren, QueryList, Directive } from '@angular/core';
import { VdlLine, VdlLineSetter } from '../core';
import { coerceToNumber } from './grid-list-measure';
export var VdlGridTile = (function () {
    function VdlGridTile(_renderer, _element) {
        this._renderer = _renderer;
        this._element = _element;
        this._rowspan = 1;
        this._colspan = 1;
    }
    Object.defineProperty(VdlGridTile.prototype, "rowspan", {
        /** Amount of rows that the grid tile takes up. */
        get: function () { return this._rowspan; },
        set: function (value) { this._rowspan = coerceToNumber(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VdlGridTile.prototype, "colspan", {
        /** Amount of columns that the grid tile takes up. */
        get: function () { return this._colspan; },
        set: function (value) { this._colspan = coerceToNumber(value); },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the style of the grid-tile element.  Needs to be set manually to avoid
     * "Changed after checked" errors that would occur with HostBinding.
     */
    VdlGridTile.prototype._setStyle = function (property, value) {
        this._renderer.setElementStyle(this._element.nativeElement, property, value);
    };
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlGridTile.prototype, "rowspan", null);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], VdlGridTile.prototype, "colspan", null);
    VdlGridTile = __decorate([
        Component({selector: 'vdl-grid-tile',
            host: {
                'role': 'listitem',
                '[class.vdl-grid-tile]': 'true',
            },
            template: "<figure class=\"vdl-figure\"><ng-content></ng-content></figure>",
            styles: [".vdl-grid-list{display:block;position:relative}.vdl-grid-tile{display:block;position:absolute;overflow:hidden}.vdl-grid-tile .vdl-figure{display:flex;position:absolute;align-items:center;justify-content:center;height:100%;top:0;right:0;bottom:0;left:0;padding:0;margin:0}.vdl-grid-tile .vdl-grid-tile-footer,.vdl-grid-tile .vdl-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;font-size:16px;position:absolute;left:0;right:0}.vdl-grid-tile .vdl-grid-tile-footer [vdl-line],.vdl-grid-tile .vdl-grid-tile-header [vdl-line]{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.vdl-grid-tile .vdl-grid-tile-footer [vdl-line]:nth-child(n+2),.vdl-grid-tile .vdl-grid-tile-header [vdl-line]:nth-child(n+2){font-size:12px}.vdl-grid-tile .vdl-grid-tile-footer>*,.vdl-grid-tile .vdl-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.vdl-grid-tile .vdl-grid-tile-footer.vdl-2-line,.vdl-grid-tile .vdl-grid-tile-header.vdl-2-line{height:68px}.vdl-grid-tile .vdl-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.vdl-grid-tile .vdl-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.vdl-grid-tile .vdl-grid-list-text:empty{display:none}.vdl-grid-tile .vdl-grid-tile-header{top:0}.vdl-grid-tile .vdl-grid-tile-footer{bottom:0}.vdl-grid-tile .vdl-grid-avatar{padding-right:16px}[dir=rtl] .vdl-grid-tile .vdl-grid-avatar{padding-right:0;padding-left:16px}.vdl-grid-tile .vdl-grid-avatar:empty{display:none}"],
            encapsulation: ViewEncapsulation.None,
        }), 
        __metadata('design:paramtypes', [Renderer, ElementRef])
    ], VdlGridTile);
    return VdlGridTile;
}());
export var VdlGridTileText = (function () {
    function VdlGridTileText(_renderer, _element) {
        this._renderer = _renderer;
        this._element = _element;
    }
    VdlGridTileText.prototype.ngAfterContentInit = function () {
        this._lineSetter = new VdlLineSetter(this._lines, this._renderer, this._element);
    };
    __decorate([
        ContentChildren(VdlLine), 
        __metadata('design:type', QueryList)
    ], VdlGridTileText.prototype, "_lines", void 0);
    VdlGridTileText = __decorate([
        Component({selector: 'vdl-grid-tile-header, vdl-grid-tile-footer',
            template: "<ng-content select=\"[vdl-grid-avatar]\"></ng-content><div class=\"vdl-grid-list-text\"><ng-content select=\"[vdl-line]\"></ng-content></div><ng-content></ng-content>"
        }), 
        __metadata('design:paramtypes', [Renderer, ElementRef])
    ], VdlGridTileText);
    return VdlGridTileText;
}());
/**
 * Directive whose purpose is to add the vdl- CSS styling to this selector.
 */
export var VdlGridAvatarCssMatStyler = (function () {
    function VdlGridAvatarCssMatStyler() {
    }
    VdlGridAvatarCssMatStyler = __decorate([
        Directive({
            selector: '[vdl-grid-avatar]',
            host: {
                '[class.vdl-grid-avatar]': 'true'
            }
        }), 
        __metadata('design:paramtypes', [])
    ], VdlGridAvatarCssMatStyler);
    return VdlGridAvatarCssMatStyler;
}());
/**
 * Directive whose purpose is to add the vdl- CSS styling to this selector.
 */
export var VdlGridTileHeaderCssMatStyler = (function () {
    function VdlGridTileHeaderCssMatStyler() {
    }
    VdlGridTileHeaderCssMatStyler = __decorate([
        Directive({
            selector: 'vdl-grid-tile-header',
            host: {
                '[class.vdl-grid-tile-header]': 'true'
            }
        }), 
        __metadata('design:paramtypes', [])
    ], VdlGridTileHeaderCssMatStyler);
    return VdlGridTileHeaderCssMatStyler;
}());
/**
 * Directive whose purpose is to add the vdl- CSS styling to this selector.
 */
export var VdlGridTileFooterCssMatStyler = (function () {
    function VdlGridTileFooterCssMatStyler() {
    }
    VdlGridTileFooterCssMatStyler = __decorate([
        Directive({
            selector: 'vdl-grid-tile-footer',
            host: {
                '[class.vdl-grid-tile-footer]': 'true'
            }
        }), 
        __metadata('design:paramtypes', [])
    ], VdlGridTileFooterCssMatStyler);
    return VdlGridTileFooterCssMatStyler;
}());
//# sourceMappingURL=grid-tile.js.map