{"version":3,"file":"grid-list.js","sourceRoot":"","sources":["../../../src/lib/grid-list/grid-list.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  NgModule,\n  ModuleWithProviders,\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer,\n  ElementRef,\n  Optional,\n} from '@angular/core';\nimport {\n  VdlGridTile, VdlGridTileText, VdlGridTileFooterCssMatStyler,\n  VdlGridTileHeaderCssMatStyler, VdlGridAvatarCssMatStyler\n} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {VdlGridListColsError} from './grid-list-errors';\nimport {Dir, VdlLineModule} from '../core';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst VDL_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'vdl-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'role': 'list',\n    '[class.vdl-grid-list]': 'true',\n  },\n  encapsulation: ViewEncapsulation.None,\n})\nexport class VdlGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(VdlGridTile) _tiles: QueryList<VdlGridTile>;\n\n  constructor(\n      private _renderer: Renderer,\n      private _element: ElementRef,\n      @Optional() private _dir: Dir) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols() { return this._cols; }\n  set cols(value: any) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize() { return this._gutter; }\n  set gutterSize(value: any) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    this._rowHeight = coerceToString(value);\n    this._setTileStyler();\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw new VdlGridListColsError();\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._tileStyler = new RatioTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(): void {\n    if (this._rowHeight === VDL_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (this._rowHeight && this._rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(this._rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(this._rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    let tracker = new TileCoordinator(this.cols, this._tiles);\n    let direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      let pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string]): void {\n    if (style) {\n      this._renderer.setElementStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\n}\n\n\n@NgModule({\n  imports: [VdlLineModule],\n  exports: [\n    VdlGridList,\n    VdlGridTile,\n    VdlGridTileText,\n    VdlLineModule,\n    VdlGridTileHeaderCssMatStyler,\n    VdlGridTileFooterCssMatStyler,\n    VdlGridAvatarCssMatStyler\n  ],\n  declarations: [\n    VdlGridList,\n    VdlGridTile,\n    VdlGridTileText,\n    VdlGridTileHeaderCssMatStyler,\n    VdlGridTileFooterCssMatStyler,\n    VdlGridAvatarCssMatStyler],\n})\nexport class VdlGridListModule {\n  /** @deprecated */\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: VdlGridListModule,\n      providers: []\n    };\n  }\n}\n"]}